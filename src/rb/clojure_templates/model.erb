<%= clojure_autogenerated %>

(ns rldb.<%= model_defn.model_name.downcase %>
  (:import (<%= root_package %>.models <%= model_defn.model_name %>)))

(def fields [
  <% model_defn.fields.each do |field_defn| %>
    :<%= field_defn.name %>
  <% end %>
  ])


(def args (atom '()))

(defn make-evalable-constructor-call [x & more]
  (do
    (compare-and-set! args (deref args) '())
    (swap! args #(into (cons x more) %))
    `(clojure.lang.Reflector/invokeConstructor
  <%= model_defn.model_name %> (to-array @args))))

(defn <%= model_defn.model_name.downcase %> [x & more] 
  (eval (apply make-evalable-constructor-call (cons x more))))


(defn new-default-instance [id] 
  (. <%= model_defn.model_name %> (newDefaultInstance id)))

<% model_defn.fields.each do |field_defn| %>

(defn <%= clojure_name field_defn.clojure_getter %> [<%= model_defn.model_name.downcase %>]
  (. <%= model_defn.model_name.downcase %> (<%= field_defn.getter[0..-3] %>)))

<% end %>

(defn set-field [<%= model_defn.model_name.downcase %> field value]
  (. <%= model_defn.model_name.downcase %> (setField field value)))

(defn get-field-type [<%= model_defn.model_name.downcase %> field]
  (. <%= model_defn.model_name.downcase %> (getFieldType field)))
  
<% model_defn.associations.each do |a| %>

(defn <%= clojure_name "get-#{a.name}" %> [<%= model_defn.model_name.downcase %>]
  (. <%= model_defn.model_name.downcase %> (<%= a.assoc_getter %>)))

<% end %>

(defn get-field [<%= model_defn.model_name.downcase %> field]
  (. <%= model_defn.model_name.downcase %> (getField field)))

(defn has-field [field]
  (let [f (keyword field)]
    (or (= :id f) (= f (some #{f} fields)))))

(defn get-default-value [<%= model_defn.model_name.downcase %> field]
  (. <%= model_defn.model_name.downcase %> (getDefaultValue field)))

(defn get-field-set [<%= model_defn.model_name.downcase %>]
  (. <%= model_defn.model_name.downcase %> (getFieldSet)))

(defn get-copy [<%= model_defn.model_name.downcase %> & db]
  (eval `(. <%= model_defn.model_name.downcase %> (getCopy ~@db))))

(defn save [<%= model_defn.model_name.downcase %>]
  (. <%= model_defn.model_name.downcase %> (save)))
