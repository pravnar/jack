<%= clojure_autogenerated %>

(ns <%= namespace %>
  (:import <%= root_package %>.models.<%= model_defn.model_name %>))

(def fields {
  <% model_defn.fields.each do |field_defn| %>
    :<%= field_defn.name %> <%= field_defn.java_type %>
  <% end %>
  })

(defn <%= model_defn.model_name.downcase %> [x & more] 
  (eval `(<%= model_defn.model_name %>. ~x ~@more)))

(defn new-default-instance [id] 
  (. <%= model_defn.model_name %> (newDefaultInstance id)))

<% model_defn.fields.each do |field_defn| %>

  (defn <% clojure_name(field_defn.clojure_getter) %> [<%= model_defn.model_name.downcase %>]
    (. <%= model_defn.model_name.downcase %> (<%= field_defn.getter %>)))

<% end %>

(defn set-field [<%= model_defn.model_name.downcase %> field value]
  (. <%= model_defn.model_name.downcase %> (setField field value)))

(defn get-field-type
  ([field] (when (string? field)
             (type (get fields (keyword field)))))
  ([<%= model_defn.model_name.downcase %> field]
    (. <%= model_defn.model_name.downcase %> (getFieldType field))))
  
<% model_defn.associations.each do |a| %>

  (defn <% clojure_name("get-#{a.name}") %> [<%= model_defn.model_name.downcase %>]
    (. <%= model_defn.model_name.downcase %> (<%= a.assoc_getter %>)))

<% end %>

(defn get-field [<%= model_defn.model_name.downcase %> field]
  (. <%= model_defn.model_name.downcase %> (getField field)))

(defn has-field [field]
  (let [f (keyword field)]
    (or (= :id f) (contains? fields f))))

(defn get-default-value [<%= model_defn.model_name.downcase %> field]
  (. <%= model_defn.model_name.downcase %> (getDefaultValue field)))

(defn get-field-set [<%= model_defn.model_name.downcase %>]
  (. <%= model_defn.model_name.downcase %> (getFieldSet)))

(defn get-copy [<%= model_defn.model_name.downcase %> & db]
  (eval `(. <%= model_defn.model_name.downcase %> (getCopy ~@db))))

(defn save [<%= model_defn.model_name.downcase %>]
  (. <%= model_defn.model_name.downcase %> (save)))
