    ;;;;
    ;;;; Autogenerated by Jack
    ;;;;
    ;;;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
    ;;;; 

(ns rldb.post
  (:import (com.rapleaf.jack.test_project.database_1.models Post)))

(def fields [
    :title
    :posted_at_millis
    :user_id
    :updated_at
  ])


(def args (atom '()))

(defn make-evalable-constructor-call [x & more]
  (do
    (compare-and-set! args (deref args) '())
    (swap! args #(into (cons x more) %))
    `(clojure.lang.Reflector/invokeConstructor
  Post (to-array @args))))

(defn post [x & more] 
  (eval (apply make-evalable-constructor-call (cons x more))))


(defn new-default-instance [id] 
  (. Post (newDefaultInstance id)))

(defn get-title [post]
  (. post (getTitle)))

(defn get-posted-at-millis [post]
  (. post (getPostedAtMillis)))

(defn get-user-id [post]
  (. post (getUserId)))

(defn get-updated-at [post]
  (. post (getUpdatedAt)))

(defn set-field [post field value]
  (. post (setField field value)))

(defn get-field-type [post field]
  (. post (getFieldType field)))

(defn get-user [post]
  (. post (getUser)))

(defn get-comments [post]
  (. post (getComments)))

(defn get-field [post field]
  (. post (getField field)))

(defn has-field [field]
  (let [f (keyword field)]
    (or (= :id f) (contains? fields f))))

(defn get-default-value [post field]
  (. post (getDefaultValue field)))

(defn get-field-set [post]
  (. post (getFieldSet)))

(defn get-copy [post & db]
  (eval `(. post (getCopy ~@db))))

(defn save [post]
  (. post (save)))
