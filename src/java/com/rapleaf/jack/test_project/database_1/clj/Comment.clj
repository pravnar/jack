    ;;;;
    ;;;; Autogenerated by Jack
    ;;;;
    ;;;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
    ;;;; 

(ns rldb.comment
  (:import (com.rapleaf.jack.test_project.database_1.models Comment)))

(def fields [
    :content
    :commenter_id
    :commented_on_id
    :created_at
  ])


(def args (atom '()))

(defn make-evalable-constructor-call [x & more]
  (do
    (compare-and-set! args (deref args) '())
    (swap! args #(into (cons x more) %))
    `(clojure.lang.Reflector/invokeConstructor
  Comment (to-array @args))))

(defn comment [x & more] 
  (eval (apply make-evalable-constructor-call (cons x more))))


(defn new-default-instance [id] 
  (. Comment (newDefaultInstance id)))

(defn get-content [comment]
  (. comment (getContent)))

(defn get-commenter-id [comment]
  (. comment (getCommenterId)))

(defn get-commented-on-id [comment]
  (. comment (getCommentedOnId)))

(defn get-created-at [comment]
  (. comment (getCreatedAt)))

(defn set-field [comment field value]
  (. comment (setField field value)))

(defn get-field-type [comment field]
  (. comment (getFieldType field)))

(defn get-user [comment]
  (. comment (getUser)))

(defn get-post [comment]
  (. comment (getPost)))

(defn get-field [comment field]
  (. comment (getField field)))

(defn has-field [field]
  (let [f (keyword field)]
    (or (= :id f) (contains? fields f))))

(defn get-default-value [comment field]
  (. comment (getDefaultValue field)))

(defn get-field-set [comment]
  (. comment (getFieldSet)))

(defn get-copy [comment & db]
  (eval `(. comment (getCopy ~@db))))

(defn save [comment]
  (. comment (save)))
