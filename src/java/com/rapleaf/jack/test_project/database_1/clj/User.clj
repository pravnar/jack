    ;;;;
    ;;;; Autogenerated by Jack
    ;;;;
    ;;;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
    ;;;; 

(ns rldb.user
  (:import (com.rapleaf.jack.test_project.database_1.models User)))

(def fields [
    :handle
    :created_at_millis
    :num_posts
    :some_date
    :some_datetime
    :bio
    :some_binary
    :some_float
    :some_decimal
    :some_boolean
  ])


(def args (atom '()))

(defn make-evalable-constructor-call [x & more]
  (do
    (compare-and-set! args (deref args) '())
    (swap! args #(into (cons x more) %))
    `(clojure.lang.Reflector/invokeConstructor
  User (to-array @args))))

(defn user [x & more] 
  (eval (apply make-evalable-constructor-call (cons x more))))


(defn new-default-instance [id] 
  (. User (newDefaultInstance id)))

(defn get-handle [user]
  (. user (getHandle)))

(defn get-created-at-millis [user]
  (. user (getCreatedAtMillis)))

(defn get-num-posts [user]
  (. user (getNumPosts)))

(defn get-some-date [user]
  (. user (getSomeDate)))

(defn get-some-datetime [user]
  (. user (getSomeDatetime)))

(defn get-bio [user]
  (. user (getBio)))

(defn get-some-binary [user]
  (. user (getSomeBinary)))

(defn get-some-float [user]
  (. user (getSomeFloat)))

(defn get-some-decimal [user]
  (. user (getSomeDecimal)))

(defn some-boolean? [user]
  (. user (isSomeBoolean)))

(defn set-field [user field value]
  (. user (setField field value)))

(defn get-field-type [user field]
  (. user (getFieldType field)))

(defn get-posts [user]
  (. user (getPosts)))

(defn get-comments [user]
  (. user (getComments)))

(defn get-image [user]
  (. user (getImage)))

(defn get-field [user field]
  (. user (getField field)))

(defn has-field [field]
  (let [f (keyword field)]
    (or (= :id f) (= f (some #{f} fields)))))

(defn get-default-value [user field]
  (. user (getDefaultValue field)))

(defn get-field-set [user]
  (. user (getFieldSet)))

(defn get-copy [user & db]
  (eval `(. user (getCopy ~@db))))

(defn save [user]
  (. user (save)))
